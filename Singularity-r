BootStrap: localimage
From: debian-baseimage.sif

%labels
  Maintainer Moritz Lell
  R_Version 4.0.4
  git_repository https://github.com/mlell/singularity-r

%help 

  The containers are accompanied by helper scripts that make your project available at a 
  pre-defined path regardless of where the files lie on your machine. This way, using absolute 
  paths do not lead to reproducibility issues. So, if you create your analyis, be sure to refer 
  to a file with a path starting with

      /proj/PATH/TO/YOUR/FILE


  The directory /proj will be translated to your project root directory. The section "How to obtain" 
  describes how to set your project root directory.

  A possibility to include external files and folders is also available which enables to clearly 
  document the dependencies of your work. It is also described in the next section.

  1 Setup after download
  ======================

  After downloading this container, move it to its own directory and extract
  the auxilliary scripts by calling

      singularity run -B "$PWD" --pwd "$PWD" CONTAINERNAME.sif setup

  
  2 Project directory
  ===================

  Change working directory into the root directory of your analysis and
  call (replace upper-case parts):

      /PATH/TO/CONTAINER/createproject"

  This creates a script in this directory from which you can call the 
  programs in the container. From there, your files will be found under
  the path "/proj", independently from your machine. This makes it easier
  for others to rerun your analysis because your machine-specific file
  paths are not visible from within the container.

%setup
  set -ue
  mkdir "$SINGULARITY_ROOTFS/usr/lib/container_commands"
  cp_container(){
    install -Dv scripts/outside/"$1" "${SINGULARITY_ROOTFS}/usr/lib/container_commands/$2"
  }
  cp_container cexec cexec
  cp_container functions-r.sh functions-r.sh
  cp_container createproject-r createproject
  cp_container user-launcher-r user-launcher
  cp_container setup setup
  
  if [ ! -z "${DEBUG-}" ]; then
    # make sure it doesn't fail
    git status -s &>/dev/null
    if [ ! "$(git status -s | wc -l)" = "0" ]; then
      echo "Working dir dirty!" >&2
      exit 1
    fi 
    git rev-parse HEAD >"$SINGULARITY_ROOTFS/commit"
  else
    echo "debug" > "$SINGULARITY_ROOTFS/commit"
  fi

%environment

  export LANGUAGE=en_US
  export LANG=en_US.UTF-8

  # overwrite possible host LC_* variables when called without --containenv or --contain
  export LC_ALL=en_US.UTF-8 

  # Disable renv sandboxing where a project is decoupled from system-wide installed libraries. 
  # This is not needed as the system libraries are frozen in the container and we install an
  # adapter package that mimics the R BH package and links to system libraries. That would not
  # work if the system libraries are not used by renv
  export RENV_CONFIG_SANDBOX_ENABLED=FALSE
%post
  # Software versions
  export R_VERSION=4.0.4
  export LANGUAGE=en_US
  export LANG=en_US.UTF-8

  # overwrite possible host LC_* variables when called without --containenv or --contain
  export LC_ALL=en_US.UTF-8 
  # Get dependencies
  # Disable check for recent release file, as we build an old snapshot
  apt-get update -o Acquire::Check-Valid-Until=false
  apt-get install -y --no-install-recommends \
    locales curl gpg dirmngr gpg-agent

  # Configure default locale
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen -a
#  /usr/sbin/update-locale LANG=en_US.UTF-8


  # Install R
  # Installed packages:
  # * R
  # * Python + libpython headers for package compilation
  # * Library headers inspired by CRAN SystemRequirements fields:
  #   - for tidyverse:          libcairo, libxml
  #   - Linear algebra:
  #      libarmadillo
  #   - handle netCDF and HDF files (CRAN: netcdf4, sf, gdal,...)
  #      libnetcdf, libgdal, libproj, libudunits2
  #   - Other geo stuff:
  #      libgeotiff
  #   - Fast Fourier Transform: libfftw
  #   - image manipulation
  #       libtiff5 libjpeg (Pseudo-package ->libjpeg-turbo)
  #       librsvg
  #       imagemagick 
  #   - Glyph rendering and Unicode:
  #       harfbuzz libicu 
  #   - Compression:            zlib1g bzip zstd zip
  #   - Nonlinear Optimizationn: libnlopt0
  #   - Systems Biology ML:     libsbml5
  #   - GNU Scientific Library: gsl
  #   - Cryptography:           libsodium
  #   - BUGS Monte Carlo language: jags
  #   - Linear Programming:     glpk
  #   - CDO Climate data library libcdi
  #   - Grid computing scheduler:
  #       libzmq3 libopenmpi
  #   - DBMS:                   libpq (libmariaclientdb <-version mismatch during install)
  apt-get install -y --no-install-recommends \
    gcc-11 \
    r-base=${R_VERSION}* \
    r-base-core=${R_VERSION}* \
    r-base-dev=${R_VERSION}* \
    r-recommended=${R_VERSION}* \
    r-base-html=${R_VERSION}* \
    r-doc-html=${R_VERSION}* \
    libpython3-all-dev python3-pip \
    libcurl4-openssl-dev \
    libssl-dev \
    man  nano   graphviz \
    procps  imagemagick \
    jags less  \
    libxml2-dev \
    libcairo2-dev \
    libxt-dev \
    libarmadillo-dev \
    libnetcdf18 libnetcdf-dev libhdf5-dev\
    gdal-bin libgdal-dev \
    proj-bin libproj-dev \
    libudunits2-dev \
    libgeotiff-dev \
    libfftw3-dev \
    libtiff-dev libjpeg-dev librsvg2-dev libpng-dev \
    libharfbuzz-dev libicu-dev\
    zlib1g-dev libbz2-dev libzstd-dev libzip-dev\
    libnlopt-dev \
    libsbml5-dev \
    libgsl-dev \
    libsodium-dev \
    libglpk-dev \
    libcdi-dev \
    libzmq3-dev libopenmpi-dev libcoarrays-openmpi-dev \
    libpq-dev \
    r-cran-bh 
#libmariadbclient-dev 
  # r-cran-bh is a dummy package with no content, but it depends on libboost-dev.
  # Therefore, the system Boost headers are reused instead of installing them again
  # with the CRAN BH package. (libgdal-dev) depends on libboost-dev anyway)

  # Install pandoc separately, for the github release has 1/10 the file size of the
  # Debian package
  curl -L https://github.com/jgm/pandoc/releases/download/2.14.1/pandoc-2.14.1-1-amd64.deb --output /tmp/pandoc.deb
  dpkg -I /tmp/pandoc.deb
  rm /tmp/pandoc.deb

    
    

  # Add a default CRAN mirror
  echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/lib/R/etc/Rprofile.site
  
  # Set default python version
  ln -s python3 /usr/bin/python

  # Clean up
  umount /var/lib/apt
  umount /var/cache/apt

  # Write the current git commit as label
  echo "git_commit $(cat /commit)" >> "$SINGULARITY_LABELS"
  rm /commit

%apprun R
  exec R "${@}"

%apprun Rscript
  exec Rscript "${@}"

%apprun python
  exec python "${@}"

%environment
  export OMP_NUM_THREADS=1

%runscript
  bash /usr/lib/container_commands/setup "$@"
  if [ "$1" = "setup" ]; then
    echo 
    echo "NOTE: Make sure the container SIF file is called 'r-py.sif'"
    echo "or adapt the scripts that were just created in the container"
    echo "directory!"
  fi



